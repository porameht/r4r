name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.4.15"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run linting
      run: |
        uv run ruff check src/
        uv run ruff format --check src/
    
    - name: Run type checking
      run: |
        uv run mypy src/r4r/ --ignore-missing-imports
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=src/r4r --cov-report=term-missing
    
    - name: Test CLI installation
      run: |
        uv tool install .
        r4r --help

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
    
    - name: Install build dependencies
      run: |
        uv sync --dev
    
    - name: Build distribution
      run: |
        uv build
    
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        uv run twine upload dist/*

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      run: |
        echo "# Release ${{ github.event.release.tag_name }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## What's Changed" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
        if [ ! -z "$LAST_TAG" ]; then
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo '# Using uv (recommended)' >> RELEASE_NOTES.md
        echo 'curl -LsSf https://astral.sh/uv/install.sh | sh' >> RELEASE_NOTES.md
        echo 'uv tool install r4r' >> RELEASE_NOTES.md
        echo '' >> RELEASE_NOTES.md
        echo '# Using pip' >> RELEASE_NOTES.md
        echo 'pip install r4r' >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md
    
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: RELEASE_NOTES.md