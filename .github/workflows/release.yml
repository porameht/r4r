name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.4.15"

jobs:
  pre-release:
    name: Create Pre-Release
    runs-on: ubuntu-latest
    if: contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Update version in pyproject.toml
      run: |
        uv run python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        content = re.sub(r'version = \"[^\"]*\"', f'version = \"${{ steps.get_version.outputs.version }}\"', content)
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        "
    
    - name: Install build dependencies
      run: |
        uv sync --dev
        uv add --dev build twine
    
    - name: Build distribution
      run: |
        uv build
    
    - name: Verify distribution
      run: |
        uv run twine check dist/*
        
        # List built files
        echo "Built files:"
        ls -la dist/
        
        # Get file sizes
        echo "File sizes:"
        du -h dist/*
    
    - name: Create GitHub Pre-Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Pre-Release ${{ steps.get_version.outputs.tag }}
        generate_release_notes: true
        files: |
          dist/*
          install.sh
        draft: false
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Test PyPI Upload (Dry Run)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ö†Ô∏è TEST_PYPI_TOKEN not set, skipping test upload"
        else
          echo "üì¶ Testing upload to Test PyPI..."
          uv run twine upload --repository testpypi dist/* --non-interactive
          echo "‚úÖ Successfully uploaded to Test PyPI"
        fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.ref_name, 'rc') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')"
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Update version in pyproject.toml
      run: |
        uv run python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        content = re.sub(r'version = \"[^\"]*\"', f'version = \"${{ steps.get_version.outputs.version }}\"', content)
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        "
    
    - name: Install build dependencies
      run: |
        uv sync --dev
        uv add --dev build twine
    
    - name: Build distribution
      run: |
        uv build
    
    - name: Verify distribution
      run: |
        uv run twine check dist/*
        
        # List built files
        echo "Built files:"
        ls -la dist/
        
        # Get file sizes
        echo "File sizes:"
        du -h dist/*
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.tag }}
        generate_release_notes: true
        files: |
          dist/*
          install.sh
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ö†Ô∏è PYPI_TOKEN not set, skipping PyPI upload"
          echo "To enable PyPI uploads, add your PyPI token as a secret named PYPI_TOKEN"
        else
          echo "üì¶ Uploading to PyPI..."
          uv run twine upload dist/* --non-interactive
          echo "‚úÖ Successfully uploaded to PyPI"
        fi
    
    - name: Update installation badge
      run: |
        echo "‚úÖ Release ${{ steps.get_version.outputs.tag }} created successfully!"
        echo ""
        echo "üì¶ Distribution files:"
        ls -la dist/
        echo ""
        echo "üîó Installation commands:"
        echo "  uv tool install r4r"
        echo "  pip install r4r"
        echo ""
        echo "üéâ Release is now available at:"
        echo "  https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.tag }}"
        
        # Check if PyPI upload was successful
        if [ ! -z "${{ secrets.PYPI_TOKEN }}" ]; then
          echo "  https://pypi.org/project/r4r/${{ steps.get_version.outputs.version }}/"
        fi